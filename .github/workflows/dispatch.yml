name: "Manual Deployment (Dev/Prelive)"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        type: choice
        required: true
        options:
          - dev
          - prelive
      run_build:
        description: 'Run build job (feature branch)'
        type: boolean
        default: false
      HAS_POSTDEPLOY_LAMBDA:
        description: "has postdeploy"
        type: boolean
        default: false 
        required: false     

jobs:
  get_version:
    name: "Get Version"
    runs-on: ubuntu-latest
    if: ${{ !inputs.run_build }}
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}
      ARTIFACT_ID: ${{ steps.version.outputs.ARTIFACT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create mock version file
        run: |
          echo "RELEASE_TAG=1.0.0" > .github_artifact_id
          echo "ARTIFACT_ID=123456" >> .github_artifact_id

      - name: Get version
        id: version
        run: |
          source .github_artifact_id
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "ARTIFACT_ID=${ARTIFACT_ID}" >> $GITHUB_OUTPUT
          echo "Using existing version: ${RELEASE_TAG}"

  set_version:
    name: "Set Version"
    runs-on: ubuntu-latest
    if: ${{ inputs.run_build }}
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}
      RUN_ID: ${{ steps.version.outputs.RUN_ID }}
    steps:
      - name: Set mock version
        id: version
        run: |
          echo "RELEASE_TAG=2.0.0" >> $GITHUB_OUTPUT
          echo "RUN_ID=789012" >> $GITHUB_OUTPUT
          echo "Setting new version: 2.0.0"

  set-env:
    runs-on: ubuntu-latest
    needs: [get_version, set_version]
    if: ${{ always() && ((!inputs.run_build && needs.get_version.result == 'success') || (inputs.run_build && needs.set_version.result == 'success')) }}
    outputs:
      REPO_NAME: ${{ steps.set-name.outputs.name }}  
    steps:
      - name: Set repository name
        id: set-name
        run: |
          echo "name=test-repo" >> $GITHUB_OUTPUT
          echo "Repository name set to: test-repo"

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: [set_version, set-env]
    if: ${{ always() && inputs.run_build && needs.set_version.result == 'success' && needs.set-env.result == 'success' }}
    steps:
      - name: Mock build process
        run: |
          echo "Building artifact: ${{ needs.set-env.outputs.REPO_NAME }}-artifacts-${{ needs.set_version.outputs.RELEASE_TAG }}.${{ needs.set_version.outputs.RUN_ID }}"
          echo "Running npm install..."
          sleep 5
          echo "Running build..."
          sleep 5
          echo "Build completed successfully"

  deploy:
    name: "Deploy to ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    needs: [get_version, set_version, set-env, build]
    if: ${{ always() && ((!inputs.run_build && needs.get_version.result == 'success') || (inputs.run_build && needs.set_version.result == 'success' && needs.build.result == 'success')) }}
    steps:
      - name: Mock deployment
        run: |
          if [[ "${{ inputs.run_build }}" == "true" ]]; then
            ARTIFACT_NAME="${{ needs.set-env.outputs.REPO_NAME }}-artifacts-${{ needs.set_version.outputs.RELEASE_TAG }}.${{ needs.set_version.outputs.RUN_ID }}"
          else
            ARTIFACT_NAME="${{ needs.set-env.outputs.REPO_NAME }}-artifacts-${{ needs.get_version.outputs.RELEASE_TAG }}.${{ needs.get_version.outputs.ARTIFACT_ID }}"
          fi
          echo "Deploying $ARTIFACT_NAME to ${{ inputs.environment }}"
          echo "Running serverless deploy..."
          sleep 5
          echo "Deployment completed successfully"

      - name: Invoke post-deploy lambda
        if: ${{ inputs.HAS_POSTDEPLOY_LAMBDA }}
        run: |
          echo "Invoke lambda-..."
          echo "has deploy lambda ${{ inputs.HAS_POSTDEPLOY_LAMBDA}}"
      
      - name: Final step
        run: |
          echo "Finsh job..."
